{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\luigi\\\\mobile\\\\Projeto-Mobile-2\\\\src\\\\pages\\\\QRcode.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { useNavigation } from '@react-navigation/core';\nexport function QRcode() {\n  var navigation = useNavigation();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  function cancelScan() {\n    return _regeneratorRuntime.async(function cancelScan$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate('Home');\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context2.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: cancelScan,\n    style: styles.button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Cancelar\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  button: {\n    height: 44,\n    width: 294,\n    backgroundColor: '#FF0000',\n    alignItems: 'center',\n    borderRadius: 5,\n    marginLeft: '5%',\n    marginTop: '110%'\n  },\n  buttonText: {\n    color: '#FFF',\n    fontWeight: 'bold',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 25\n  }\n});","map":{"version":3,"sources":["C:/luigi/mobile/Projeto-Mobile-2/src/pages/QRcode.js"],"names":["React","useState","useEffect","BarCodeScanner","useNavigation","QRcode","navigation","hasPermission","setHasPermission","scanned","setScanned","cancelScan","navigate","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","container","undefined","StyleSheet","absoluteFillObject","button","buttonText","create","flex","flexDirection","justifyContent","height","width","backgroundColor","alignItems","borderRadius","marginLeft","marginTop","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { useNavigation } from '@react-navigation/core';\n\n\nexport  function QRcode() {\n\n  const navigation = useNavigation();\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  async function cancelScan() {\n      \n  \n    navigation.navigate('Home');\n  }\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    //const num = data;\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      /> \n      <TouchableOpacity onPress={cancelScan} style={styles.button}>\n          <Text style={styles.buttonText}>Cancelar</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  button: {\n    //height: 40,\n    //width: 320,\n    //backgroundColor: '#4B7DFE',\n    //alignItems: 'center',\n    //borderRadius: 5,\n    //marginLeft: 20,\n    //marginRight: 20,\n    //marginBottom: 40,\n    //marginTop: 605,\n\n    height: 44,\n    width: 294,\n    backgroundColor: '#FF0000',\n    alignItems: 'center',\n    borderRadius: 5,\n    marginLeft: '5%',\n    marginTop: '110%',\n  },\n\n  buttonText: {\n    color: '#FFF',\n    fontWeight: 'bold',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 25,\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}